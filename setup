#!/bin/bash

# Welcome to the laptop script!
# Be prepared to turn your laptop (or desktop, no haters here)
# into an awesome development machine.
# Inspired by thoughbot's similar script + some improvements

##################
## Script Overview
## Initial setup:
## 1. Create installation directories
## 2. Installing zsh-oh-my
## 3. Creating basic .gemrc config for eventual ruby install
## 4. Installing Homebrew
## 5. Installing Homebrew packages
## 6. Homebrew packages postinstall (setup/cleanup)
## 7. Installing selected optional packages and applications
## . Installing NVM, latest stable Node, and Yarn

# shellcheck disable=SC2154
trap 'ret=$?; test $ret -ne 0 && printf "failed\n\n" >&2; exit $ret' EXIT


shw_err ()  {
    echo $(tput bold)$(tput setaf 1) $@ $(tput sgr 0)
}

fancy_echo() {
  echo $(tput bold)$(tput setaf 2) $@ $(tput sgr 0)
}

append_to_zshrc() {
  local text="$1" zshrc
  local skip_new_line="${2:-0}"

  if [ -w "$HOME/.zshrc.local" ]; then
    zshrc="$HOME/.zshrc.local"
  else
    zshrc="$HOME/.zshrc"
  fi

  if ! grep -Fqs "$text" "$zshrc"; then
    if [ "$skip_new_line" -eq 1 ]; then
      printf "%s\\n" "$text" >> "$zshrc"
    else
      printf "\\n%s\\n" "$text" >> "$zshrc"
    fi
  fi
}

update_shell() {
  local shell_path;
  shell_path="$(command -v zsh)"

  fancy_echo "Changing your shell to zsh ..."
  if ! grep "$shell_path" /etc/shells > /dev/null 2>&1 ; then
    fancy_echo "Adding '$shell_path' to /etc/shells"
    sudo sh -c "echo $shell_path >> /etc/shells"
  fi
  sudo chsh -s "$shell_path" "$USER"
}

# Install rbenv & rbenv-default-gems

install_rbenv() {
  fancy_echo "Installing rbenv..."
  [brew install rbenv] &>/dev/null
  fancy_echo "Validating rbenv install ..."
  curl -s -fsSL https://github.com/rbenv/rbenv-installer/raw/master/bin/rbenv-doctor | bash

  fancy_echo "Installing and configuring rbenv-default-gems plugin ..."
  rm -rf $HOME/.rbenv/plugins/rbenv-default-gems
  rm -rf $HOME/.rbenv/default-gems
  git clone https://github.com/rbenv/rbenv-default-gems.git $HOME/.rbenv/plugins/rbenv-default-gems
  touch $HOME/.rbenv/default-gems
  echo "bundler" >> $HOME/.rbenv/default-gems
  echo "rails" >> $HOME/.rbenv/default-gems

  if type rbenv > /dev/null; then
    fancy_echo "Installing latest Ruby release (v$(rbenv install -l | grep -v - | tail -1))..."
    rbenv install $(rbenv install -l | grep -v - | tail -1)
    ret_code=$?
    rbenv global $(rbenv install -l | grep -v - | tail -1)
    rbenv rehash

    source ~/.gemrc

    fancy_echo "Configuring bundler globally ..."
    number_of_cores=$(sysctl -n hw.ncpu)
    bundle config --global jobs $((number_of_cores - 1))
  else
    fancy_echo "rbenv command not found!"
  fi
}

# Install NVM/Node/Yarn

install_node() {
  fancy_echo "Installing NVM..."
  shw_err "sudo password required to ensure clean NVM installation:"
  sudo rm -rf ~/.nvm ~/.npm ~/.bower # Ensures fresh NVM install

  mkdir "$HOME/.nvm/"

  curl -s -o- https://raw.githubusercontent.com/creationix/nvm/v0.34.0/install.sh | bash
  append_to_zshrc "export NVM_DIR="$HOME/.nvm""
  append_to_zshrc "[ -s "$NVM_DIR/nvm.sh" ] && \. '$NVM_DIR/nvm.sh' # This loads nvm"
  source ~/.nvm/nvm.sh
    fancy_echo "Installing Node..."
    nvm install node &> /dev/null

    fancy_echo "Installing yarn via Homebrew using nvm node install ..."
    [brew install yarn --without-node] &>/dev/null

    fancy_echo "Installing Pure prompt..."
    npm install --global pure-prompt
    append_to_zshrc "autoload -U promptinit; promptinit"
    append_to_zshrc "prompt pure"
}

###########################################################################
################## 1. Create installation directories #####################

if [ ! -d "$HOME/.bin/" ]; then
  mkdir "$HOME/.bin"
fi

if [ -d "$HOME/.rbenv/" ]; then
  rm -rf ~/.rbenv
fi

###########################################################################
############### 2. Installing zsh-oh-my and updating shell ################

fancy_echo "Installing zsh-oh-my ..."
rm -rf ~/.oh-my-zsh
git clone -q https://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh

fancy_echo "Copying .zshrc config ..."
rm -rf ~/.zshrc
cp zsh-template ~/.zshrc
update_shell

###########################################################################
################## 3. Create .gemrc config for ruby gems ##################

if [ ! -f "$HOME/.gemrc" ]; then
  fancy_echo "Creating empty ruby gem config dotfile ..."
  touch "$HOME/.gemrc"
  fancy_echo "Adding gem config default settings ..."
  cp gemrc-template ~/.gemrc
else
  fancy_echo "Adding gem config default settings ..."
  cp gemrc-template ~/.gemrc
fi

###########################################################################
########################## 4. Installing Homebrew #########################

if ! [ -x "$(command -v brew)" ]; then
  fancy_echo "Installing Homebrew ..."
    curl -fsS \
      'https://raw.githubusercontent.com/Homebrew/install/master/install' | ruby

    append_to_zshrc '# recommended by brew doctor'

    # shellcheck disable=SC2016
    append_to_zshrc 'export PATH="/usr/local/bin:$PATH"' 1

    export PATH="/usr/local/bin:$PATH"
fi

if [ brew list 2>/dev/null | grep -Fq brew-cask 2>/dev/null ]; then
  fancy_echo "Uninstalling old Homebrew-Cask ..."
  brew uninstall --force brew-cask
fi

###########################################################################
###################### 5. Installing Homebrew packages ####################

fancy_echo "Updating Homebrew formulae ..."
brew update --force # https://github.com/Homebrew/brew/issues/1151
brew bundle --file=- <<EOF
tap "thoughtbot/formulae"
tap "homebrew/services"
tap "universal-ctags/universal-ctags"
tap "caskroom/cask"
tap "heroku/brew"
tap "homebrew/cask-fonts"
# Unix
brew "dialog"
brew "universal-ctags", args: ["HEAD"]
brew "git"
brew "openssl"
brew "rcm"
brew "reattach-to-user-namespace"
brew "the_silver_searcher"
brew "tmux"
brew "vim"
brew "watchman"
brew "zsh"
brew "archey"
# Heroku
brew "heroku/brew/heroku"
brew "parity"
# GitHub
brew "hub"
# Image manipulation
brew "imagemagick"
# Programming language prerequisites and package managers
brew "libyaml" # should come after openssl
brew "coreutils"
cask "gpg-suite"
# Databases
brew "postgres", restart_service: :changed
brew "redis", restart_service: :changed
# iTerm2
cask "font-fira-code"
EOF

###########################################################################
###################### 6. Homebrew package postinstall ####################

fancy_echo "Configuring zsh-syntax-highlighting ..."
rm -rf ${HOME}/zsh-syntax-highlighting # Ensure zsh-syntax-highlighting install...
rm -rf ${HOME}/.zsh/zsh-autosuggestions # Ensure fresh zsh-autosuggestions install...

git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ~/zsh-syntax-highlighting --quiet
git clone -q -b develop https://github.com/zsh-users/zsh-autosuggestions ~/.zsh/zsh-autosuggestions

#############################################################################
######### 7. Installing selected optional packages and applications #########


TERMINAL=$(tty)

HEIGHT=15
WIDTH=40
CHOICE_HEIGHT=10
TITLE="macOS Development Environment Installer"
MENU="Select one or more options with <space> :"

OPTIONS=(
  1 "rbenv/Ruby/Rails"      on
  2 "Node/Yarn" on
  3 "Rust"      off
  4 "Python2"   off
  5 "Python3"   off
  6 "Go"        off
  7 "Java"      off
  8 "iTerm2"    off
)

CHOICES=$(dialog --shadow \
                --cancel-label "Exit" \
                --stdout \
                --separate-output \
                --backtitle "$BACKTITLE" \
                --title "$TITLE" \
                --checklist "$MENU" \
                $HEIGHT $WIDTH $CHOICE_HEIGHT \
                "${OPTIONS[@]}")
EXIT_CODE=$?

if [ "1" = "$EXIT_CODE" ] ; then
  clear
  echo "Cancelled..."
  echo "Development environment installation complete! ðŸš€"
  exit 0;
fi

if [ "255" = "$EXIT_CODE" ] ; then
  clear
  echo "Cancelled..."
  echo "Development environment installation complete! ðŸš€"
  exit 0;
fi

if [[ -z "$CHOICES" ]]; then
  clear
  echo "No options were selected..."
  echo "Development environment installation complete! ðŸš€"
  exit 0;
else
  clear
  for choice in $CHOICES
  do
    case $choice in
      1)
          install_rbenv
          ;;
      2)
          install_node
          ;;
      3)
          echo "Installing Rust..."
          curl https://sh.rustup.rs -sSf | sh
          ;;
      4)
          echo "Installing Python2..."
          brew install python@2
          ;;
      5)
          echo "Installing Pythong3..."
          brew install python
          ;;
      6)
          echo "Installing Golang..."
          brew install golang
          ;;
      7)
          echo "Installing Java..."
          brew cask install java
          ;;
      8)
          echo "Installing iTerm 2..."
          brew cask install iterm2
          curl --silent -L https://iterm2.com/shell_integration/install_shell_integration_and_utilities.sh | bash
          rm -rf ~/Library/Preferences/com.googlecode.iterm2.plist
          cp com.googlecode.iterm2.plist ~/Library/Preferences
          open -a iTerm.app
          ;;
      9)
          echo "Installing Visual Studio Code..."
          brew cask install visual-studio-code
          open -a Visual\ Studio\ Code.app
          ;;
    esac
  done
fi

fancy_echo "Development environment installation complete! ðŸš€"
fancy_echo "Follow steps at: https://help.github.com/articles/adding-a-new-ssh-key-to-your-github-account/ to add your ssh key to github"

exit 1;