#!/bin/bash

# Welcome to the laptop script!
# Be prepared to turn your laptop (or desktop, no haters here)
# into an awesome development machine.
# Inspired by thoughbot's similar script + some improvements

##################
## Script Overview
## Initial setup:
## 1. Create installation directories
## 2. Installing zsh-oh-my
## 3. Creating basic .gemrc config for eventual ruby install
## 4. Installing Homebrew
## 5. Installing Homebrew packages
## 6. Homebrew packages postinstall (setup/cleanup)
## 7. Installing rbenv and latest version of Ruby
## . Installing NVM, latest stable Node, and Yarn

# shellcheck disable=SC2154
trap 'ret=$?; test $ret -ne 0 && printf "failed\n\n" >&2; exit $ret' EXIT


shw_err ()  {
    echo $(tput bold)$(tput setaf 1) $@ $(tput sgr 0)
}

fancy_echo() {
  echo $(tput bold)$(tput setaf 2) $@ $(tput sgr 0)
}

append_to_zshrc() {
  local text="$1" zshrc
  local skip_new_line="${2:-0}"

  if [ -w "$HOME/.zshrc.local" ]; then
    zshrc="$HOME/.zshrc.local"
  else
    zshrc="$HOME/.zshrc"
  fi

  if ! grep -Fqs "$text" "$zshrc"; then
    if [ "$skip_new_line" -eq 1 ]; then
      printf "%s\\n" "$text" >> "$zshrc"
    else
      printf "\\n%s\\n" "$text" >> "$zshrc"
    fi
  fi
}

update_shell() {
  local shell_path;
  shell_path="$(command -v zsh)"

  fancy_echo "Changing your shell to zsh ..."
  if ! grep "$shell_path" /etc/shells > /dev/null 2>&1 ; then
    fancy_echo "Adding '$shell_path' to /etc/shells"
    sudo sh -c "echo $shell_path >> /etc/shells"
  fi
  sudo chsh -s "$shell_path" "$USER"
}

show_menu(){
    NORMAL=`echo "\033[m"`
    MENU=`echo "\033[36m"` #Blue
    NUMBER=`echo "\033[33m"` #yellow
    FGRED=`echo "\033[41m"`
    RED_TEXT=`echo "\033[31m"`
    ENTER_LINE=`echo "\033[33m"`
    echo -e "${MENU}*********************************************${NORMAL}"
    echo -e "${MENU}**${NUMBER} 1)${MENU} Mount dropbox ${NORMAL}"
    echo -e "${MENU}**${NUMBER} 2)${MENU} Mount USB 500 Gig Drive ${NORMAL}"
    echo -e "${MENU}**${NUMBER} 3)${MENU} Restart Apache ${NORMAL}"
    echo -e "${MENU}**${NUMBER} 4)${MENU} ssh Frost TomCat Server ${NORMAL}"
    echo -e "${MENU}**${NUMBER} 5)${MENU} ${NORMAL}"
    echo -e "${MENU}*********************************************${NORMAL}"
    echo -e "${ENTER_LINE}Please enter a menu option and enter or ${RED_TEXT}enter to exit. ${NORMAL}"
    read opt
}
function option_picked() {
    COLOR='\033[01;31m' # bold red
    RESET='\033[00;00m' # normal white
    MESSAGE=${@:-"${RESET}Error: No message passed"}
    echo -e "${COLOR}${MESSAGE}${RESET}"
}

clear
show_menu
while [ opt != '' ]
    do
    if [[ $opt = "" ]]; then 
            exit;
    else
        case $opt in
        1) clear;
        option_picked "Option 1 Picked";
        sudo mount /dev/sdh1 /mnt/DropBox/; #The 3 terabyte
        menu;
        ;;

        2) clear;
            option_picked "Option 2 Picked";
            sudo mount /dev/sdi1 /mnt/usbDrive; #The 500 gig drive
        menu;
            ;;

        3) clear;
            option_picked "Option 3 Picked";
        sudo service apache2 restart;
            show_menu;
            ;;

        4) clear;
            option_picked "Option 4 Picked";
        ssh lmesser@ -p 2010;
            show_menu;
            ;;

        x)exit;
        ;;

        \n)exit;
        ;;

        *)clear;
        option_picked "Pick an option from the menu";
        show_menu;
        ;;
    esac
fi

HEIGHT=15
WIDTH=40
CHOICE_HEIGHT=4
BACKTITLE="Backtitle here"
TITLE="Title here"
MENU="Choose one of the following options:"

OPTIONS=(1 "Node"
         2 "Yarn"
         3 "Rust"
         4 "Python2"
         5 "Python3"
         6 "Go")

CHOICE=$(dialog --clear \
                --backtitle "$BACKTITLE" \
                --title "$TITLE" \
                --menu "$MENU" \
                $HEIGHT $WIDTH $CHOICE_HEIGHT \
                "${OPTIONS[@]}" \
                2>&1 >/dev/tty)

clear
case $CHOICE in
        1)
            echo "You chose Option 1"
            ;;
        2)
            echo "You chose Option 2"
            ;;
        3)
            echo "You chose Option 3"
            ;;
esac

###########################################################################
################## 1. Create installation directories #####################

if [ ! -d "$HOME/.bin/" ]; then
  mkdir "$HOME/.bin"
fi

if [ -d "$HOME/.rbenv/"]; then
  rm -rf ~/.rbenv
fi

###########################################################################
############### 2. Installing zsh-oh-my and updating shell ################

fancy_echo "Installing zsh-oh-my ..."
rm -rf ~/.oh-my-zsh
[git clone https://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh] &>/dev/null

fancy_echo "Copying .zshrc config ..."
rm -rf ~/.zshrc
cp zsh-template ~/.zshrc
update_shell

###########################################################################
################## 3. Create .gemrc config for ruby gems ##################

if [ ! -f "$HOME/.gemrc" ]; then
  fancy_echo "Creating empty ruby gem config dotfile ..."
  touch "$HOME/.gemrc"
  fancy_echo "Adding gem config default settings ..."
  cp gemrc-template ~/.gemrc
else
  fancy_echo "Adding gem config default settings ..."
  cp gemrc-template ~/.gemrc
fi

###########################################################################
########################## 4. Installing Homebrew #########################

if ! [ -x "$(command -v brew)" ]; then
  fancy_echo "Installing Homebrew ..."
    curl -fsS \
      'https://raw.githubusercontent.com/Homebrew/install/master/install' | ruby

    append_to_zshrc '# recommended by brew doctor'

    # shellcheck disable=SC2016
    append_to_zshrc 'export PATH="/usr/local/bin:$PATH"' 1

    export PATH="/usr/local/bin:$PATH"
fi

if [ brew list 2>/dev/null | grep -Fq brew-cask 2>/dev/null ]; then
  fancy_echo "Uninstalling old Homebrew-Cask ..."
  brew uninstall --force brew-cask
fi

###########################################################################
###################### 5. Installing Homebrew packages ####################

fancy_echo "Updating Homebrew formulae ..."
brew update --force # https://github.com/Homebrew/brew/issues/1151
brew bundle --file=- <<EOF
tap "thoughtbot/formulae"
tap "homebrew/services"
tap "universal-ctags/universal-ctags"
tap "caskroom/cask"
tap "heroku/brew"
tap "homebrew/cask-fonts"
# Unix
brew "universal-ctags", args: ["HEAD"]
brew "git"
brew "openssl"
brew "rcm"
brew "reattach-to-user-namespace"
brew "the_silver_searcher"
brew "tmux"
brew "vim"
brew "watchman"
brew "zsh"
brew "archey"
# Heroku
brew "heroku/brew/heroku"
brew "parity"
# GitHub
brew "hub"
# Image manipulation
brew "imagemagick"
# Programming language prerequisites and package managers
brew "libyaml" # should come after openssl
brew "coreutils"
cask "gpg-suite"
# Databases
brew "postgres", restart_service: :changed
brew "redis", restart_service: :changed
# Ruby Version Manager
brew "rbenv"
brew "ruby-build"
# VS Code
cask "visual-studio-code"
# iTerm2
cask "font-fira-code"
cask "iterm2"
EOF

###########################################################################
###################### 6. Homebrew package postinstall ####################

fancy_echo "Configuring zsh-syntax-highlighting ..."
rm -rf ${HOME}/zsh-syntax-highlighting # In the event zsh-syntax-highlighting is already installed, delete directory...

[git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ~/zsh-syntax-highlighting] &>/dev/null

rm -rf ~/Library/Preferences/com.googlecode.iterm2.plist
cp com.googlecode.iterm2.plist ~/Library/Preferences

###########################################################################
############## 7. Installing rbenv and latest version of Ruby #############

if brew list | grep -Fq rbenv; then
  fancy_echo "Validating rbenv install ..."
  curl -fsSL https://github.com/rbenv/rbenv-installer/raw/master/bin/rbenv-doctor | bash

  fancy_echo "Installing and configuring rbenv-default-gems plugin ..."
  rm -rf $HOME/.rbenv/plugins/rbenv-default-gems
  rm -rf $HOME/.rbenv/default-gems
  git clone https://github.com/rbenv/rbenv-default-gems.git $HOME/.rbenv/plugins/rbenv-default-gems
  touch $HOME/.rbenv/default-gems
  echo "bundler" >> $HOME/.rbenv/default-gems
  echo "rails" >> $HOME/.rbenv/default-gems
fi

if type rbenv > /dev/null; then
  fancy_echo "Installing latest Ruby release (v$(rbenv install -l | grep -v - | tail -1))..."
  rbenv install $(rbenv install -l | grep -v - | tail -1)
  ret_code=$?
  rbenv global $(rbenv install -l | grep -v - | tail -1)
  rbenv rehash

  fancy_echo "Configuring bundler globally ..."
  number_of_cores=$(sysctl -n hw.ncpu)
  bundle config --global jobs $((number_of_cores - 1))
else
  fancy_echo "rbenv command not found!"
fi

###########################################################################
############# 8. Installing NVM, latest stable Node, and Yarn #############

fancy_echo "Installing latest Node ..."
rm -rf ~/.nvm ~/.npm ~/.bower # Ensures fresh NVM install

mkdir "$HOME/.nvm/"

curl -s -o- https://raw.githubusercontent.com/creationix/nvm/v0.34.0/install.sh | bash
source ~/.nvm/nvm.sh

if type nvm > /dev/null; then
  fancy_echo "Installing latest Node ..."
  [nvm install node] &>/dev/null

  fancy_echo "Installing yarn via Homebrew using nvm node install ..."
  [brew install yarn --without-node] &>/dev/null

  [npm install --global pure-prompt] &>/dev/null
  append_to_zshrc "autoload -U promptinit; promptinit"
  append_to_zshrc "prompt pure"
else
  fancy_echo "nvm command not found!"
fi

fancy_echo "Development environment installation complete! ðŸš€"
fancy_echo "Follow steps at: https://help.github.com/articles/adding-a-new-ssh-key-to-your-github-account/ to add your ssh key to github"

fancy_echo "Opening iTerm and exiting...."
open -a iTerm
exit 0;